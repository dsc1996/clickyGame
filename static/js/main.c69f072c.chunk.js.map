{"version":3,"sources":["../clicky-game/src/items/container/index.js","../clicky-game/src/items/imageCard/index.js","../clicky-game/src/items/title/index.js","../clicky-game/src/App.js","../clicky-game/src/serviceWorker.js","../clicky-game/src/index.js"],"names":["Container","props","react_default","a","createElement","className","children","ImageCard","onClick","scoring","name","alt","src","image","Title","App","state","pic","chosen","score","highScore","status","console","log","arr","some","arrVal","checkIfChosen","_this","setState","concat","Object","toConsumableArray","_this2","this","shuffledEmblems","array","i","length","j","Math","floor","random","temp","shuffle","container","title","map","imageCard","id","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c69f072c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n  return <div className=\"container\">{props.children}</div>;\n}\n\nexport default Container;","import React from \"react\";\nimport \"./style.css\";\n\nfunction ImageCard(props) {\n    return (\n        <span onClick={() => props.scoring(props.name)} className=\"scoring\">\n            <div className=\"card\">\n                <div className=\"img-container\">\n                    <img alt={props.name} src={props.image}/>\n                </div>\n            </div>\n        </span>\n    );\n}\n\nexport default ImageCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;","import React, { Component } from \"react\";\nimport Container from \"./items/container\";\nimport ImageCard from \"./items/imageCard\";\nimport Title from \"./items/title\";\nimport pic from \"./pic.json\";\n\nfunction shuffle(array) {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\n\nclass App extends Component {\n  state = {\n    pic,\n    chosen: [],\n    score: 0,\n    highScore: 0,\n    status: \"Click on each hall of famer once and only once.\"\n  };\n\n  scoring = name => {\n\n    console.log(\"I Clicked on \", { name });\n\n    function checkIfChosen(arr, name) {\n      return arr.some(function (arrVal) {\n        return name === arrVal;\n      });\n    }\n\n    let isChosen = checkIfChosen(this.state.chosen, name)\n\n    if (isChosen === true) {\n      this.setState({ score: 0 });\n      this.setState({ chosen: [] })\n      this.setState({ status: \"You already chose that one.  Start over!\" });\n\n      console.log(this.state.chosen);\n\n    }\n    else {\n\n      this.setState({ score: this.state.score + 1 });\n      this.setState({ status: \"Valid Answer!\" });\n      this.setState({ chosen: [...this.state.chosen, name] })\n\n      console.log(\"this is score\", this.state.score);\n      console.log(\"this is HIGH score\", this.state.highScore);\n\n      console.log(this.state.chosen);\n      if (this.state.score +1 > this.state.highScore) {\n        this.setState({ highScore: this.state.score +1});\n      }\n      if (this.state.score +1 === 12) {\n        this.setState({ status: \"YOU WON!  Click any hall of famer to play again.\" });\n      }\n    } \n  }; \n\n  render() {\n    let shuffledEmblems = shuffle(pic);\n    return (\n      <Container>\n        <Title>The History of Baseball</Title>\n        <div className=\"scoreDiv\">\n          <h3 className=\"score\">{this.state.status}</h3>\n          <h2 className=\"score\">Current Score: {this.state.score}</h2>\n          <h2 className=\"score\">High Score: {this.state.highScore}</h2>\n          <h2>Winning Score: 12</h2>\n        </div>\n        {shuffledEmblems.map(pic => (\n          <ImageCard\n            scoring={this.scoring}\n            id={pic.id}\n            key={pic.id}\n            name={pic.name}\n            image={pic.image}\n          />\n        ))}\n      </Container>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}